###############################################
GUIDE COMPLET : CRÉATION ET TEST DU BACKEND PYTHON
###############################################

Ce guide explique toutes les étapes pour créer, configurer et tester un backend Python moderne (FastAPI et Flask) avec Firebase comme base de données.

-----------------------------
A. INSTALLATION DE PYTHON
-----------------------------
1. Va sur le site officiel : https://www.python.org/downloads/
2. Télécharge la dernière version stable (ex : Python 3.11.x)
3. Lance l'installateur et coche la case **"Add Python to PATH"** avant de cliquer sur "Install Now"
4. Vérifie l'installation dans un terminal/cmd :
   python --version
   (Tu dois voir la version de Python affichée)

-----------------------------
B. INSTALLATION DE L'EXTENSION PYTHON POUR VSCODE
-----------------------------
1. Ouvre VSCode
2. Va dans le menu Extensions (icône carrée à gauche ou Ctrl+Shift+X)
3. Cherche "Python" (éditeur : Microsoft)
4. Clique sur "Installer"
5. Pour activer l'environnement virtuel dans VSCode :
   - Ouvre le dossier backend-python dans VSCode
   - Ouvre un terminal intégré (Ctrl+ù)
   - Active l'environnement :
     venv\Scripts\activate
   - VSCode détectera automatiquement l'environnement Python

-----------------------------
C. INSTALLATION DE NODE.JS
-----------------------------
1. Va sur le site officiel : https://nodejs.org/
2. Télécharge la version LTS recommandée
3. Lance l'installateur et suis les instructions
4. Vérifie l'installation dans un terminal/cmd :
   node --version
   npm --version
   (Tu dois voir les versions de Node.js et npm)

-----------------------------
D. UTILISER NODE.JS DANS VSCODE
-----------------------------
1. Ouvre le dossier de ton projet Node.js (ex : fild) dans VSCode
2. Ouvre un terminal intégré (Ctrl+ù)
3. Installe les dépendances du projet :
   npm install
4. Pour lancer le serveur Node.js :
   npm start
   (ou la commande indiquée dans package.json)

-----------------------------
E. REPRENDRE LE GUIDE PYTHON ET FASTAPI
-----------------------------
(Suit les étapes 1 à 14 déjà présentes ci-dessous)

-----------------------------
1. PRÉREQUIS
-----------------------------
- Python 3.8 ou plus récent installé
- Un compte Google et un projet Firebase créé
- Git (optionnel)

-----------------------------
2. CRÉATION DU DOSSIER BACKEND
-----------------------------
- Va dans le dossier principal de ton projet (Fildaily)
- Crée un dossier : backend-python

-----------------------------
3. INITIALISATION DE L'ENVIRONNEMENT PYTHON
-----------------------------
Ouvre un terminal dans le dossier backend-python et tape :

python -m venv venv
venv\Scripts\activate

-----------------------------
4. CRÉATION DES FICHIERS PRINCIPAUX
-----------------------------
- requirements.txt (liste des dépendances)
- main.py (point d'entrée FastAPI)
- app/ (dossier pour organiser le code)
- firebase_config.py (configuration Firebase)
- .gitignore (pour ignorer la clé privée)

-----------------------------
5. INSTALLATION DES DÉPENDANCES
-----------------------------
Dans le terminal (environnement virtuel activé) :

pip install -r requirements.txt

Si tu veux aussi utiliser Flask :
pip install flask

-----------------------------
6. AJOUT DES DÉPENDANCES DANS requirements.txt
-----------------------------
fastapi
uvicorn
python-dotenv
httpx
sqlalchemy
databases
passlib[bcrypt]
python-multipart
aiofiles
email-validator
firebase-admin
flask

-----------------------------
7. CONFIGURATION DE FIREBASE
-----------------------------
1. Va sur https://console.firebase.google.com/
2. Sélectionne ton projet
3. Clique sur la roue dentée (Paramètres du projet)
4. Va dans l'onglet "Comptes de service"
5. Clique sur "Générer une nouvelle clé privée"
6. Télécharge le fichier serviceAccountKey.json
7. Place ce fichier dans backend-python/
8. Vérifie que .gitignore contient bien :
   serviceAccountKey.json

-----------------------------
8. STRUCTURE DU CODE FASTAPI
-----------------------------
- main.py : point d'entrée
- app/routes.py : routes API (login, messages, etc.)
- firebase_config.py : initialisation Firebase

-----------------------------
9. LANCEMENT DU SERVEUR FASTAPI
-----------------------------
Dans le dossier backend-python :

uvicorn main:app --reload

Accède à la documentation interactive :
http://127.0.0.1:8000/docs

-----------------------------
10. TESTER LES ROUTES
-----------------------------
Utilise la page /docs ou un outil comme Postman.

Exemple POST /messages :
{
  "sender": "alice",
  "receiver": "bob",
  "content": "Salut Bob !"
}

-----------------------------
11. UTILISER FLASK (OPTIONNEL)
-----------------------------
Pour créer un backend Flask simple :

Crée un fichier flask_app.py :

from flask import Flask
app = Flask(__name__)

@app.route("/")
def home():
    return "Hello depuis Flask !"

if __name__ == "__main__":
    app.run(debug=True)

Lance le serveur Flask :
python flask_app.py

-----------------------------
12. CONSEILS ET BONNES PRATIQUES
-----------------------------
- Ne partage jamais serviceAccountKey.json
- Utilise un environnement virtuel pour chaque projet
- Utilise la documentation FastAPI (/docs) pour tester rapidement
- Pour la production, adapte la configuration CORS et sécurise les routes

-----------------------------
13. DÉPANNAGE
-----------------------------
- Si une erreur apparaît au lancement, lis bien le message dans le terminal
- Vérifie la présence de serviceAccountKey.json
- Vérifie que toutes les dépendances sont installées

-----------------------------
14. POUR ALLER PLUS LOIN
-----------------------------
- Ajoute la vérification des tokens Firebase pour sécuriser les routes
- Connecte-toi à une vraie base de données (PostgreSQL, MySQL, etc.)
- Déploie ton backend sur un serveur (Heroku, Render, etc.)

############################################### 